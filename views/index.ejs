<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vehicle Maintenance Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    #vehicleSelect {
      width: 300px;
      margin: 20px auto;
      display: block;
      text-align: center;
    }

    canvas {
      max-width: 100%;
      height: 400px;
    }

    #maintenanceDetails {
      margin-top: 20px;
      font-size: 1rem;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container my-5">
    <h1 class="mb-4 text-center">Vehicle Maintenance Tracker</h1>

    <!-- Vehicle Table -->
    <table class="table table-striped mt-3">
      <thead>
        <tr>
          <th>Brand</th>
          <th>Model</th>
          <th>Year</th>
          <th>Miles</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% vehicles.forEach(vehicle => { %>
          <tr>
            <td><%= vehicle.brand %></td>
            <td><%= vehicle.model %></td>
            <td><%= vehicle.year %></td>
            <td>
              <form action="/update-miles/<%= vehicle.id %>" method="POST" class="d-flex">
                <input type="number" name="miles" value="<%= vehicle.miles %>" class="form-control me-2" required>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </td>
            <td>
              <a href="/notes/<%= vehicle.id %>" class="btn btn-secondary me-2">View/Add Notes</a>
              <form action="/vehicles/<%= vehicle.id %>?_method=DELETE" method="POST" style="display: inline;">
                <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this vehicle?');">Delete</button>
              </form>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>

    <!-- Add New Vehicle Form -->
    <h2 class="mt-5">Add a New Vehicle</h2>
    <form action="/vehicles" method="POST" class="row g-3">
      <div class="col-md-2">
        <input type="text" name="id" class="form-control" placeholder="ID" required>
      </div>
      <div class="col-md-2">
        <input type="text" name="brand" class="form-control" placeholder="Brand" required>
      </div>
      <div class="col-md-3">
        <input type="text" name="model" class="form-control" placeholder="Model" required>
      </div>
      <div class="col-md-2">
        <input type="number" name="year" class="form-control" placeholder="Year" required>
      </div>
      <div class="col-md-2">
        <input type="number" name="miles" class="form-control" placeholder="Miles" required>
      </div>
      <div class="col-md-1">
        <button type="submit" class="btn btn-success w-100">Add</button>
      </div>
    </form>
  </div>

  <!-- Dropdown and Graph Section -->
  <div class="container my-5">
    <select id="vehicleSelect" class="form-select">
      <% vehicles.forEach(vehicle => { %>
        <option value="<%= vehicle.id %>"><%= vehicle.model %></option>
      <% }); %>
    </select>

    <h2 class="mt-5 text-center">Cost vs Mileage</h2>
    <canvas id="costChart"></canvas>

    <!-- Maintenance Details Section -->
    <div id="maintenanceDetails" class="text-center">
      Click on a point to see maintenance details.
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      window.costChart = null;

      // Fetch maintenance data for a given vehicle
      async function fetchMaintenanceData(vehicleId) {
        try {
          const response = await fetch(`/maintenance/${vehicleId}`);
          if (!response.ok) throw new Error(`Failed to fetch data for vehicle ${vehicleId}`);
          return await response.json();
        } catch (error) {
          console.error('Error fetching maintenance data:', error.message);
          return { maintenanceData: [], maxCost: 0 };
        }
      }

      // Render Cost vs Mileage Chart
      async function renderCostChart(vehicleId) {
        const dataResponse = await fetchMaintenanceData(vehicleId);
        const data = dataResponse.maintenanceData;
        const maxCost = parseFloat(dataResponse.maxCost) || 0;

        if (data.length === 0) {
          alert('No maintenance data found for this vehicle.');
          return;
        }

        const mileageData = data.map(record => record.odometer); // X-axis: Mileage
        const cumulativeCostData = data.map(record => parseFloat(record.cost)); // Y-axis: Cumulative costs
        const services = data.map(record => record.note); // Maintenance services
        const dates = data.map(record => record.date); // Maintenance dates

        // Calculate individual maintenance costs
        const maintenanceCosts = data.map((record, index) => {
          if (index === 0) {
            return parseFloat(record.cost) || 0;
          } else {
            return parseFloat(record.cost) - (parseFloat(data[index - 1].cost) || 0);
          }
        });

        // Find the maximum individual maintenance cost
        const maxIndividualCost = Math.max(...maintenanceCosts, 1000); // Set a default min to $1,000 if needed

        const canvas = document.getElementById('costChart');
        const ctx = canvas.getContext('2d');

        if (window.costChart) {
          window.costChart.destroy();
        }

        window.costChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: mileageData, // X-axis: Mileage
            datasets: [
              {
                label: 'Cumulative Maintenance Cost',
                data: cumulativeCostData, // Y-axis: Cumulative costs
                borderColor: 'rgba(255, 99, 132, 1)', // Red
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                fill: true,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              tooltip: {
                callbacks: {
                  label: function (context) {
                    const index = context.dataIndex;
                    const mileage = mileageData[index];
                    const totalCost = cumulativeCostData[index];
                    const maintenanceCost = maintenanceCosts[index];
                    const service = services[index];
                    const date = dates[index];
                    return [
                      `Mileage: ${mileage} miles`,
                      `Total Cost: $${totalCost.toFixed(2)}`,
                      `Maintenance Cost: $${maintenanceCost.toFixed(2)}`,
                      `Service: ${service}`,
                      `Date: ${date}`,
                    ];
                  },
                },
              },
            },
            onClick: (event, elements) => {
              if (elements.length > 0) {
                const chartElement = elements[0];
                const index = chartElement.index; // Index of the clicked point
                const mileage = mileageData[index];
                const totalCost = cumulativeCostData[index];
                const maintenanceCost = maintenanceCosts[index];
                const service = services[index];
                const date = dates[index];

                // Update the maintenance details section
                const detailsDiv = document.getElementById('maintenanceDetails');
                detailsDiv.innerHTML = `
                  <p><strong>Date:</strong> ${date}</p>
                  <p><strong>Mileage:</strong> ${mileage} miles</p>
                  <p><strong>Total Cost:</strong> $${totalCost.toFixed(2)}</p>
                  <p><strong>Maintenance Cost:</strong> $${maintenanceCost.toFixed(2)}</p>
                  <p><strong>Service:</strong> ${service}</p>
                `;
              }
            },
            scales: {
              y: {
                beginAtZero: false,
                min: maxIndividualCost, // Dynamically set min to the largest individual cost
                title: { display: true, text: 'Cost ($)' },
              },
              x: { title: { display: true, text: 'Mileage (miles)' } },
            },
          },
        });
      }

      // Attach event listener for vehicle selection
      const vehicleSelect = document.getElementById('vehicleSelect');
      vehicleSelect.addEventListener('change', (event) => {
        const vehicleId = event.target.value;
        renderCostChart(vehicleId);
      });

      // Render initial chart for the default selected vehicle
      const defaultVehicleId = vehicleSelect.value;
      renderCostChart(defaultVehicleId);
    });
  </script>
</body>
</html>
