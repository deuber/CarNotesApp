<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vehicle Maintenance Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    #vehicleSelect {
      width: 300px;
      margin: 20px auto;
      display: block;
      text-align: center;
    }

    #graphContainer {
      margin-top: 40px;
      text-align: center;
    }

    canvas {
      max-width: 100%; /* Full width */
      height: .5%; important; /* Reduce vertical height by 50% */
    }
  </style>
</head>
<body>
  <div class="container my-5">
    <h1 class="mb-4 text-center">Vehicle Maintenance Tracker</h1>

    <!-- Vehicle Table -->
    <table class="table table-striped mt-3">
      <thead>
        <tr>
          <th>Brand</th>
          <th>Model</th>
          <th>Year</th>
          <th>Miles</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% vehicles.forEach(vehicle => { %>
          <tr>
            <td><%= vehicle.brand %></td>
            <td><%= vehicle.model %></td>
            <td><%= vehicle.year %></td>
            <td>
              <form action="/update-miles/<%= vehicle.id %>" method="POST" class="d-flex">
                <input type="number" name="miles" value="<%= vehicle.miles %>" class="form-control me-2" required>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </td>
            <td>
              <a href="/notes/<%= vehicle.id %>" class="btn btn-secondary me-2">View/Add Notes</a>
              <form action="/vehicles/<%= vehicle.id %>?_method=DELETE" method="POST" style="display: inline;">
                <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this vehicle?');">Delete</button>
              </form>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>

    <!-- Add New Vehicle Form -->
    <h2 class="mt-5">Add a New Vehicle</h2>
    <form action="/vehicles" method="POST" class="row g-3">
      <div class="col-md-2">
        <input type="text" name="id" class="form-control" placeholder="ID" required>
      </div>
      <div class="col-md-2">
        <input type="text" name="brand" class="form-control" placeholder="Brand" required>
      </div>
      <div class="col-md-3">
        <input type="text" name="model" class="form-control" placeholder="Model" required>
      </div>
      <div class="col-md-2">
        <input type="number" name="year" class="form-control" placeholder="Year" required>
      </div>
      <div class="col-md-2">
        <input type="number" name="miles" class="form-control" placeholder="Miles" required>
      </div>
      <div class="col-md-1">
        <button type="submit" class="btn btn-success w-100">Add</button>
      </div>
    </form>
  </div>

  <!-- Dropdown and Graph Section -->
 <div class="container my-5">
    <!-- <h2>Select a Vehicle to Show in the Graph</h2> -->
    <select id="vehicleSelect" class="form-select">
      <% vehicles.forEach(vehicle => { %>
        <option value="<%= vehicle.id %>"><%= vehicle.model %></option>
      <% }); %>
    </select>
    <canvas id="maintenanceChart"></canvas>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      window.maintenanceChart = null;

      // Fetch maintenance data for a given vehicle
      async function fetchMaintenanceData(vehicleId) {
        console.log(`Fetching maintenance data for vehicle: ${vehicleId}`);
        try {
          const response = await fetch(`/maintenance/${vehicleId}`);
          if (!response.ok) throw new Error(`Failed to fetch data for vehicle ${vehicleId}`);
          const data = await response.json();
          console.log('Maintenance data fetched:', data);
          return data;
        } catch (error) {
          console.error('Error fetching maintenance data:', error.message);
          return [];
        }
      }

      // Render the maintenance chart
      async function renderMaintenanceChart(vehicleId) {
        console.log(`Rendering chart for vehicle: ${vehicleId}`);
        const data = await fetchMaintenanceData(vehicleId);

        if (data.length === 0) {
          alert('No maintenance data found for this vehicle.');
          return;
        }

        const labels = data.map(record => record.date); // Extract dates
        const mileageData = data.map(record => record.miles); // Extract mileage
        const services = data.map(record => record.service); // Extract service notes

        console.log('Chart data:', { labels, mileageData, services });

        const canvas = document.getElementById('maintenanceChart');
        const ctx = canvas.getContext('2d');

        // Destroy any existing chart instance
        if (window.maintenanceChart) {
          console.log('Destroying previous chart instance');
          window.maintenanceChart.destroy();
        }

        // Create a new chart instance
        window.maintenanceChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: 'Maintenance Over Time',
              data: mileageData,
              borderColor: 'rgba(54, 162, 235, 1)', // Blue color
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              fill: true
            }]
          },
          options: {
            responsive: true,
            plugins: {
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const service = services[context.dataIndex];
                    const miles = context.raw;
                    return [`Mileage: ${miles} miles`, `Note: ${service}`];
                  }
                }
              }
            }
          }
        });
      }

      // Attach event listener for vehicle selection
      const vehicleSelect = document.getElementById('vehicleSelect');
      vehicleSelect.addEventListener('change', (event) => {
        const selectedVehicleId = event.target.value;
        console.log(`Vehicle changed to: ${selectedVehicleId}`);
        renderMaintenanceChart(selectedVehicleId);
      });

      // Render initial chart for the default selected vehicle
      const defaultVehicleId = vehicleSelect.value;
      renderMaintenanceChart(defaultVehicleId);
    });
  </script>
</body>
</html>
