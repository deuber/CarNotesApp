<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vehicle Maintenance Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    #vehicleSelect {
      width: 300px;
      margin: 20px auto;
      display: block;
      text-align: center;
    }

    canvas {
      max-width: 100%;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class="container my-5">
    <h1 class="mb-4 text-center">Vehicle Maintenance Tracker</h1>

    <!-- Vehicle Table -->
    <table class="table table-striped mt-3">
      <thead>
        <tr>
          <th>Brand</th>
          <th>Model</th>
          <th>Year</th>
          <th>Miles</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% vehicles.forEach(vehicle => { %>
          <tr>
            <td><%= vehicle.brand %></td>
            <td><%= vehicle.model %></td>
            <td><%= vehicle.year %></td>
            <td>
              <form action="/update-miles/<%= vehicle.id %>" method="POST" class="d-flex">
                <input type="number" name="miles" value="<%= vehicle.miles %>" class="form-control me-2" required>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </td>
            <td>
              <a href="/notes/<%= vehicle.id %>" class="btn btn-secondary me-2">View/Add Notes</a>
              <form action="/vehicles/<%= vehicle.id %>?_method=DELETE" method="POST" style="display: inline;">
                <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this vehicle?');">Delete</button>
              </form>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>

    <!-- Dropdown and Graph Section -->
    <div class="container my-5">
      <select id="vehicleSelect" class="form-select">
        <% vehicles.forEach(vehicle => { %>
          <option value="<%= vehicle.id %>"><%= vehicle.model %></option>
        <% }); %>
      </select>

      <h2 class="mt-5 text-center">Cost vs Mileage</h2>
      <canvas id="costChart"></canvas>

      <h2 class="mt-5 text-center">Maintenance at Mileage</h2>
      <canvas id="maintenanceChart"></canvas>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        window.costChart = null;
        window.maintenanceChart = null;

        // Fetch maintenance data for a given vehicle
        async function fetchMaintenanceData(vehicleId) {
          try {
            const response = await fetch(`/maintenance/${vehicleId}`);
            if (!response.ok) throw new Error(`Failed to fetch data for vehicle ${vehicleId}`);
            return await response.json();
          } catch (error) {
            console.error('Error fetching maintenance data:', error.message);
            return [];
          }
        }

        // Render Cost vs Mileage Chart
        async function renderCostChart(vehicleId) {
          const data = await fetchMaintenanceData(vehicleId);

          if (data.length === 0) {
            alert('No maintenance data found for this vehicle.');
            return;
          }

          const mileageData = data.map(record => record.miles); // Extract mileage
          const costData = data.map(record => record.cost || 0); // Extract costs

          const canvas = document.getElementById('costChart');
          const ctx = canvas.getContext('2d');

          if (window.costChart) {
            window.costChart.destroy();
          }

          window.costChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: mileageData,
              datasets: [
                {
                  label: 'Cost vs Mileage',
                  data: costData,
                  borderColor: 'rgba(255, 99, 132, 1)', // Red for cost
                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                  fill: true,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: { beginAtZero: true, title: { display: true, text: 'Cost ($)' } },
                x: { title: { display: true, text: 'Mileage (miles)' } },
              },
            },
          });
        }

        // Render Maintenance at Mileage Chart
        async function renderMaintenanceChart(vehicleId) {
          const data = await fetchMaintenanceData(vehicleId);

          if (data.length === 0) {
            alert('No maintenance data found for this vehicle.');
            return;
          }

          const mileageData = data.map(record => record.miles); // Extract mileage
          const maintenanceNotes = data.map(record => record.service || ''); // Extract service notes

          const canvas = document.getElementById('maintenanceChart');
          const ctx = canvas.getContext('2d');

          if (window.maintenanceChart) {
            window.maintenanceChart.destroy();
          }

          window.maintenanceChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: mileageData, // X-axis labels as mileage
              datasets: [
                {
                  label: 'Maintenance at Mileage',
                  data: mileageData, // Use mileage data for Y-axis to create the curve
                  borderColor: 'rgba(54, 162, 235, 1)', // Blue line
                  backgroundColor: 'rgba(54, 162, 235, 0.2)', // Light blue fill
                  fill: true,
                  tension: 0, // Smooth the curve
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                tooltip: {
                  callbacks: {
                    label: function (context) {
                      const mileage = context.raw; // Use mileage as tooltip data
                      const note = maintenanceNotes[context.dataIndex];
                      return `Mileage: ${mileage}\nService: ${note || 'N/A'}`;
                    },
                  },
                },
              },
              scales: {
                x: {
                  title: { display: true, text: 'Mileage (miles)' },
                },
                y: {
                  title: { display: true, text: 'Maintenance Count' },
                  beginAtZero: true,
                },
              },
            },
          });
        }

        // Attach event listener for vehicle selection
        const vehicleSelect = document.getElementById('vehicleSelect');
        vehicleSelect.addEventListener('change', (event) => {
          const vehicleId = event.target.value;
          renderCostChart(vehicleId);
          renderMaintenanceChart(vehicleId);
        });

        // Render initial charts for the default selected vehicle
        const defaultVehicleId = vehicleSelect.value;
        renderCostChart(defaultVehicleId);
        renderMaintenanceChart(defaultVehicleId);
      });
    </script>
  </body>
</html>
